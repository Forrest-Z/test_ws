#!/usr/bin/env python
# bezier local planner configuration

PACKAGE = 'bz_local_planner'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("sim_time",            double_t, 0, "The amount of time to roll trajectories out for in seconds", 1.7, 0)
gen.add("sim_granularity",     double_t, 0, "The granularity with which to check for collisions along each trajectory in meters", 0.025, 0)
gen.add("stop_time_buffer",    double_t, 0, "The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds", 0.2, 0)
gen.add("bz_length_tolerance", double_t, 0, "bezier curve length tolerance in meters", 0.02, 0)
gen.add("x_tolerance",         double_t, 0, "x tolerance in meters", 0.05, 0)
gen.add("y_tolerance",         double_t, 0, "y tolerance in meters", 0.05, 0)
gen.add("xy_tolerance",        double_t, 0, "Euclidean distance tolerance in meters", 0.05, 0)
gen.add("yaw_tolerance", 	   double_t, 0, "yaw tolerance in radius", 0.05, 0)
gen.add("max_vel_x", 	   double_t, 0, "Maximum of linear velocity", 0.3, 0)
gen.add("min_vel_x", 	   double_t, 0, "The scale of linear velocity when robot is close enough to the goal", 0.15, 0)
gen.add("angular_ratio", 	   double_t, 0, "Linear ratio of angular velocity w.r.t the change of yaw", 3.0, 0)
gen.add("vel_ratio", 	   double_t, 0, "Linear ratio of cmd_vel", 0.1, 0)
gen.add("minimum_dist", 	   double_t, 0, "The minimum judging distance for final goal", 0.1, 0)
gen.add("wheel_base", 	   double_t, 0, "Magnitidude of wheelbase", 1.55, 0)
gen.add("x_offset_pos", 	   double_t, 0, "The positive offset of goal on the x axis", 1.0, 0)
gen.add("x_offset_neg", 	   double_t, 0, "The negative offset of goal on the x axis", 1.0, 0)
gen.add("goal_reach_level",    int_t,    0, "goal reach level", 3, 0, 4)

exit(gen.generate(PACKAGE, "bz_local_planner", "BZPlanner"))
